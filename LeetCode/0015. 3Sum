class Solution {
public:
    vector<vector<int>> threeSum(vector<int>& nums) {

        const int n = nums.size();
        vector<vector<int>> ans;                  //Create 2D array 
    
        sort(nums.begin() , nums.end());          //sort the vector
        
        for(int i = 0; i < n; i++){

            if(i > 0 && nums[i] == nums[i-1]) continue;          //skip duplicate for first i.
            
            int left = i + 1;
            int right = n - 1;

            while(left < right){
                const int sum = nums[i] + nums[left] + nums[right];

                if(sum < 0){
                    left++;
                }else if(sum > 0){
                    right--;
                }else{

                    ans.push_back({nums[i] , nums[left] , nums[right]});        //if sum == 0

                    left++;             //after pushing make +1 index for skip duplicates
                    right--;
                    
                    //skip repeating duplicates
                    while(left < right && nums[left] == nums[left - 1]) left++;
                    while(left < right && nums[right] == nums[right + 1]) right--;                 
                }
            }
        }

        return ans;    
    }
};
