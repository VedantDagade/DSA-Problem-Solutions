class Solution {
public:
    vector<vector<int>> ans;
   
    // Recursion Function -: 
    void backtrack(vector<int>& nums, int start){

        //base case
        if(start == nums.size()){
            ans.push_back(nums);
            return;
        }

        for(int i = start; i < nums.size(); i++){
            swap(nums[i] , nums[start]);             // Choose element for current position
            backtrack(nums , start + 1);      // Recurse for remaining elements
            swap(nums[i] , nums[start]);      // backtrack undo swap.
        }
    }

    vector<vector<int>> permute(vector<int>& nums) {
        backtrack(nums , 0);
        return ans;
    }
};
